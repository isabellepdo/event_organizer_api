c
track_add.lectures_by_track.create!(lecture_id: lecture.id, start_time: @track_allocated_time)
c
track_add
LectureByTrack.create!(track_id: track_add.id, lecture_id: lecture.id, start_time: @track_allocated_time)
new_lecture = track_add.lecture_by_track.create!(lecture_id: lecture.id, start_time: @track_allocated_time)
new_lecture = track_add.lecture_by_tracks.create!(lecture_id: lecture.id, start_time: @track_allocated_time)
new_lecture = track_add.lectures_by_track.create!(lecture_id: lecture.id, start_time: @track_allocated_time)
c
@track_allocated_time
lecture
c
lecture
c
(@track_allocated_time + lecture_minutes.minutes <= Time.current.beginning_of_day + 12.hours) && (@track_allocated_time + lecture_minutes.minutes <= Time.current.beginning_of_day + 16.hours)
@track_allocated_time + lecture_minutes.minutes
@track_allocated_time
@track_allocated_time + lecture_minutes.minutes
@track_allocated_time
c
@track_allocated_time
(@track_allocated_time + lecture_minutes.minutes <= Time.current.beginning_of_day + 12.hours) && (@track_allocated_time + lecture_minutes.minutes <= Time.current.beginning_of_day + 16.hours)
c
track_to_use
c
track_to_use
c
self.tracks
c
self.tracks
self.track
self.tracks
self.lectures
self
self]
self.tracks
c
self.tracks
self.lectures
self
Track.all
Track
self.tracks.any?
self.track.any?
self.track
self.tracks
c
track_to_use
c
lecture.save!
lecture.allocated = false 
c
@event.organizer_event
@event
c
@event
c
@event
@event.organizer_event
c
n
event_params
c
event_params
params
c
exception
n
event_params
c
lecture_params
@lecture
n
c
@lecture
n
lecture_params
c
exception
n
lecture_params
c
lecture_params
c
exception
n
c
exception
n
lecture_params
c
exception
n
c
exception
n
params[:name]
c
exception
n
lecture_params = params
params
lecture_params
params
c
params
lecture_params
c
lecture_params
c
params
lecture_params
